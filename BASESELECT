
<!DOCTYPE html>
<html lang="pt-Br">
<head>
  <meta charset="UTF-8">
  <title>Dashboard para Grandes Bases de Dados</title>
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; margin: 0; }
    h1, h2 { color: #333; }
    .stats-container { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 30px; }
    .stats-card { flex: 1; min-width: 300px; padding: 15px; background: #f8f9fa; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    table { width: 100%; border-collapse: collapse; margin: 20px 0; font-size: 14px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #4e73df; color: white; position: sticky; top: 0; }
    tr:nth-child(even) { background-color: #f2f2f2; }
    .highlight { background-color: #fff3cd; }
    canvas { max-width: 100%; margin: 20px 0; }
    button {
      background-color: #4e73df;
      color: white;
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 10px;
      margin-bottom: 10px;
      font-size: 14px;
    }
    button:hover { background-color: #2e59d9; }
    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
    .button-group { margin: 20px 0; display: flex; flex-wrap: wrap; }
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      display: none;
    }
    .loading-spinner {
      border: 5px solid #f3f3f3;
      border-top: 5px solid #4e73df;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin-bottom: 15px;
    }
    .loading-text {
      color: white;
      font-size: 18px;
      margin-bottom: 10px;
      text-align: center;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .progress-container {
      width: 80%;
      max-width: 500px;
      background-color: #f1f1f1;
      border-radius: 5px;
      margin-top: 20px;
    }
    .progress-bar {
      width: 0%;
      height: 25px;
      background-color: #4e73df;
      border-radius: 5px;
      text-align: center;
      line-height: 25px;
      color: white;
      transition: width 0.3s;
    }
    .data-container {
      max-height: 500px;
      overflow-y: auto;
      border: 1px solid #ddd;
      margin-bottom: 20px;
    }
    .performance-info {
      font-size: 12px;
      color: #666;
      margin-top: 5px;
    }
    input[type="file"] {
      margin-bottom: 15px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      width: 100%;
      max-width: 500px;
    }
  </style>
</head>
<body>
  <h1>Dashboard para Grandes Bases de Dados</h1>
  <h2>Processamento otimizado para até 500 mil registros</h2>
  
  <input type="file" id="upload" accept=".xlsx,.csv" />
  <div class="performance-info">Recomendado: Arquivos .xlsx com até 500.000 linhas</div>
  
  <div class="button-group">
    <button id="process-btn" onclick="processarDados()">Processar Dados</button>
    <button id="export-valid-btn" onclick="exportarDadosValidos()" disabled>Exportar Dados Válidos</button>
    <button id="export-invalid-btn" onclick="exportarDadosInvalidos()" disabled>Exportar Dados Inválidos</button>
    <button id="export-stats-btn" onclick="exportarEstatisticas()" disabled>Exportar Estatísticas</button>
    <button id="export-all-btn" onclick="exportarTudo()" disabled>Exportar Tudo</button>
    <button id="cancel-btn" onclick="cancelarProcessamento()" disabled>Cancelar</button>
  </div>
  
  <div class="loading-overlay" id="loading-overlay">
    <div class="loading-spinner"></div>
    <div class="loading-text" id="loading-text">Processando dados...</div>
    <div class="progress-container">
      <div class="progress-bar" id="progress-bar">0%</div>
    </div>
    <div class="loading-text" id="progress-details"></div>
    <div class="performance-info" id="performance-info"></div>
  </div>
  
  <div id="dashboard">
    <div class="stats-container">
      <div class="stats-card">
        <h3>Estatísticas de Limpeza</h3>
        <table id="stats-summary">
          <tr><th>Métrica</th><th>Valor</th></tr>
        </table>
      </div>
      
      <div class="stats-card">
        <h3>Problemas Encontrados</h3>
        <table id="issues-table">
          <tr><th>Tipo de Problema</th><th>Quantidade</th><th>% do Total</th></tr>
        </table>
      </div>
    </div>
    
    <div class="stats-container">
      <div>
        <h3>Distribuição de Problemas</h3>
        <canvas id="issues-chart"></canvas>
      </div>
      <div>
        <h3>Status de Validação</h3>
        <canvas id="validation-chart"></canvas>
      </div>
    </div>
    
    <h2>Amostra de Dados Inválidos</h2>
    <div class="data-container">
      <table id="invalid-data">
        <thead>
          <tr>
            <th>CPF</th>
            <th>Telefone</th>
            <th>Nome</th>
            <th>Problema</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    
    <h2>Dados Válidos (Amostra)</h2>
    <div class="data-container">
      <table id="valid-data">
        <thead>
          <tr>
            <th>CPF</th>
            <th>Telefone</th>
            <th>Nome</th>
            <th>Margem Disponível</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <script>
    // Variáveis globais
    let rawData = [];
    let cleanData = [];
    let invalidData = [];
    let stats = {
      total: 0,
      valid: 0,
      invalid: 0,
      issues: {
        missingCPF: 0,
        invalidCPF: 0,
        missingPhone: 0,
        invalidPhone: 0,
        duplicates: 0,
        other: 0
      }
    };
    let processing = false;
    let cancelRequested = false;
    let startTime = 0;
    let lastUpdateTime = 0;

    // Configuração de performance
    const BATCH_SIZE = 5000; // Processa em lotes para não travar a UI
    const UPDATE_INTERVAL = 200; // Atualiza UI a cada X ms

    // Elementos do DOM
    const dom = {
      upload: document.getElementById('upload'),
      processBtn: document.getElementById('process-btn'),
      exportValidBtn: document.getElementById('export-valid-btn'),
      exportInvalidBtn: document.getElementById('export-invalid-btn'),
      exportStatsBtn: document.getElementById('export-stats-btn'),
      exportAllBtn: document.getElementById('export-all-btn'),
      cancelBtn: document.getElementById('cancel-btn'),
      loadingOverlay: document.getElementById('loading-overlay'),
      loadingText: document.getElementById('loading-text'),
      progressBar: document.getElementById('progress-bar'),
      progressDetails: document.getElementById('progress-details'),
      performanceInfo: document.getElementById('performance-info'),
      statsSummary: document.getElementById('stats-summary'),
      issuesTable: document.getElementById('issues-table'),
      invalidData: document.getElementById('invalid-data').querySelector('tbody'),
      validData: document.getElementById('valid-data').querySelector('tbody')
    };

    // Mostrar loading
    function showLoading(message) {
      dom.loadingText.textContent = message;
      dom.progressBar.style.width = '0%';
      dom.progressBar.textContent = '0%';
      dom.loadingOverlay.style.display = 'flex';
      dom.processBtn.disabled = true;
      dom.exportValidBtn.disabled = true;
      dom.exportInvalidBtn.disabled = true;
      dom.exportStatsBtn.disabled = true;
      dom.exportAllBtn.disabled = true;
      dom.cancelBtn.disabled = false;
      processing = true;
      cancelRequested = false;
      startTime = performance.now();
      lastUpdateTime = startTime;
    }

    // Atualizar progresso
    function updateProgress(percent, processed, total) {
      const currentTime = performance.now();
      
      // Atualiza a barra de progresso
      dom.progressBar.style.width = percent + '%';
      dom.progressBar.textContent = Math.round(percent) + '%';
      
      // Atualiza detalhes a cada intervalo ou se for a última atualização
      if (currentTime - lastUpdateTime > UPDATE_INTERVAL || percent >= 100) {
        const elapsed = (currentTime - startTime) / 1000;
        const recordsPerSecond = processed / elapsed;
        
        dom.progressDetails.innerHTML = `
          Processados: ${processed.toLocaleString()} de ${total.toLocaleString()} registros<br>
          Velocidade: ${Math.round(recordsPerSecond).toLocaleString()} registros/segundo<br>
          Tempo decorrido: ${elapsed.toFixed(1)} segundos
        `;
        
        if (percent < 100) {
          const remaining = (total - processed) / recordsPerSecond;
          dom.performanceInfo.textContent = `Tempo estimado restante: ${remaining.toFixed(1)} segundos`;
        } else {
          dom.performanceInfo.textContent = `Processamento concluído em ${elapsed.toFixed(1)} segundos`;
        }
        
        lastUpdateTime = currentTime;
      }
    }

    // Esconder loading
    function hideLoading() {
      dom.loadingOverlay.style.display = 'none';
      dom.processBtn.disabled = false;
      dom.exportValidBtn.disabled = cleanData.length === 0;
      dom.exportInvalidBtn.disabled = invalidData.length === 0;
      dom.exportStatsBtn.disabled = rawData.length === 0;
      dom.exportAllBtn.disabled = rawData.length === 0;
      dom.cancelBtn.disabled = true;
      processing = false;
    }

    // Cancelar processamento
    function cancelarProcessamento() {
      if (processing) {
        cancelRequested = true;
        dom.loadingText.textContent = "Finalizando...";
        dom.cancelBtn.disabled = true;
      }
    }

    // Processar dados principal
    async function processarDados() {
      const file = dom.upload.files[0];
      if (!file) return alert('Selecione um arquivo para processar.');
      
      showLoading('Carregando arquivo...');
      
      try {
        // Processamento assíncrono para não bloquear a UI
        setTimeout(async () => {
          try {
            // Leitura do arquivo em chunks
            const data = await readFileInChunks(file);
            updateProgress(10, 0, 1);
            
            // Processamento do XLSX
            const workbook = XLSX.read(data, { type: 'array' });
            updateProgress(30, 0, 1);
            
            // Converter para JSON em chunks
            const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
            rawData = [];
            await convertSheetToJSON(firstSheet);
            
            if (cancelRequested) {
              hideLoading();
              alert("Processamento cancelado pelo usuário.");
              return;
            }
            
            // Processar registros em lotes
            await processRecordsInBatches();
            
            if (cancelRequested) {
              hideLoading();
              alert("Processamento cancelado pelo usuário.");
              return;
            }
            
            // Atualizar UI
            updateStatistics();
            updateCharts();
            showDataSamples();
            updateProgress(100, stats.total, stats.total);
            
            setTimeout(() => {
              hideLoading();
              alert(`Processamento concluído!\nTotal: ${stats.total.toLocaleString()} registros\nVálidos: ${stats.valid.toLocaleString()} (${((stats.valid/stats.total)*100).toFixed(1)}%)\nInválidos: ${stats.invalid.toLocaleString()} (${((stats.invalid/stats.total)*100).toFixed(1)}%)`);
            }, 500);
            
          } catch (error) {
            hideLoading();
            alert('Erro ao processar arquivo: ' + error.message);
            console.error(error);
          }
        }, 100);
      } catch (error) {
        hideLoading();
        alert('Erro ao ler o arquivo: ' + error.message);
      }
    }

    // Ler arquivo em chunks para evitar travamentos
    function readFileInChunks(file) {
      return new Promise((resolve, reject) => {
        const chunkSize = 1024 * 1024 * 10; // 10MB chunks
        const fileSize = file.size;
        const chunks = [];
        let offset = 0;
        const reader = new FileReader();
        
        reader.onload = function(e) {
          if (e.target.error) {
            reject(e.target.error);
            return;
          }
          chunks.push(e.target.result);
          offset += e.target.result.byteLength;
          
          // Atualiza progresso
          const percent = Math.min(100, (offset / fileSize) * 30);
          updateProgress(percent, 0, 1);
          
          if (offset < fileSize) {
            if (cancelRequested) {
              reject(new Error("Processamento cancelado"));
              return;
            }
            readNextChunk();
          } else {
            // Concatena todos os chunks em um único Uint8Array
            const totalLength = chunks.reduce((acc, chunk) => acc + chunk.byteLength, 0);
            const result = new Uint8Array(totalLength);
            let position = 0;
            for (const chunk of chunks) {
              result.set(new Uint8Array(chunk), position);
              position += chunk.byteLength;
            }
            resolve(result);
          }
        };
        
        function readNextChunk() {
          const end = Math.min(offset + chunkSize, fileSize);
          const slice = file.slice(offset, end);
          reader.readAsArrayBuffer(slice);
        }
        
        readNextChunk();
      });
    }

    // Converter planilha para JSON em chunks
    async function convertSheetToJSON(sheet) {
      return new Promise(resolve => {
        setTimeout(() => {
          rawData = XLSX.utils.sheet_to_json(sheet);
          resolve();
        }, 0);
      });
    }

    // Processar registros em lotes
    async function processRecordsInBatches() {
      // Reset stats
      stats = {
        total: rawData.length,
        valid: 0,
        invalid: 0,
        issues: {
          missingCPF: 0,
          invalidCPF: 0,
          missingPhone: 0,
          invalidPhone: 0,
          duplicates: 0,
          other: 0
        }
      };
      
      cleanData = [];
      invalidData = [];
      const cpfSet = new Set();
      
      // Processa em lotes para não travar a UI
      for (let i = 0; i < rawData.length; i += BATCH_SIZE) {
        if (cancelRequested) break;
        
        const batchEnd = Math.min(i + BATCH_SIZE, rawData.length);
        for (let j = i; j < batchEnd; j++) {
          processSingleRecord(rawData[j], cpfSet);
        }
        
        // Atualiza progresso
        const percent = 30 + (batchEnd / rawData.length) * 70;
        updateProgress(percent, batchEnd, rawData.length);
        
        // Libera a UI para atualizações
        await new Promise(resolve => setTimeout(resolve, 0));
      }
    }

    // Processar um único registro
    function processSingleRecord(record, cpfSet) {
      // Get CPF and phone regardless of column name
      const cpf = record['CPF_AJUS'] || record['cpf'] || record['CPF'] || '';
      const phone = record['CELULAR_2'] || record['telefone_celular'] || record['tel1'] || '';
      const nome = record['DS_NOME'] || record['nome'] || '';
      const margem = record['VL_MARGEM'] || record['margem_disponivel'] || 0;
      
      // Check for issues
      const issues = [];
      
      // CPF validation
      if (!cpf) {
        issues.push('CPF faltante');
        stats.issues.missingCPF++;
      } else if (!isValidCPF(cpf)) {
        issues.push('CPF inválido');
        stats.issues.invalidCPF++;
      } else if (cpfSet.has(cpf)) {
        issues.push('CPF duplicado');
        stats.issues.duplicates++;
      } else {
        cpfSet.add(cpf);
      }
      
      // Phone validation
      if (!phone) {
        issues.push('Telefone faltante');
        stats.issues.missingPhone++;
      } else if (!isValidPhone(phone)) {
        issues.push('Telefone inválido');
        stats.issues.invalidPhone++;
      }
      
      if (issues.length > 0) {
        stats.invalid++;
        invalidData.push({
          ...record,
          cpf,
          phone,
          nome,
          margem,
          issues: issues.join(', ')
        });
      } else {
        stats.valid++;
        cleanData.push({
          ...record,
          cpf,
          phone,
          nome,
          margem
        });
      }
    }

    // Validação de CPF
    function isValidCPF(cpf) {
      cpf = cpf.toString().replace(/[^\d]+/g, '');
      if (cpf.length !== 11) return false;
      
      // Validação dos dígitos verificadores (opcional para performance)
      // Pode ser removido para bases muito grandes
      let sum = 0;
      let remainder;
      
      for (let i = 1; i <= 9; i++) {
        sum += parseInt(cpf.substring(i-1, i)) * (11 - i);
      }
      
      remainder = (sum * 10) % 11;
      if ((remainder === 10) || (remainder === 11)) remainder = 0;
      if (remainder !== parseInt(cpf.substring(9, 10))) return false;
      
      sum = 0;
      for (let i = 1; i <= 10; i++) {
        sum += parseInt(cpf.substring(i-1, i)) * (12 - i);
      }
      
      remainder = (sum * 10) % 11;
      if ((remainder === 10) || (remainder === 11)) remainder = 0;
      if (remainder !== parseInt(cpf.substring(10, 11))) return false;
      
      return true;
    }
    
    // Validação de telefone
    function isValidPhone(phone) {
      phone = phone.toString().replace(/[^\d]+/g, '');
      return phone.length >= 10 && phone.length <= 11;
    }

    // Atualizar estatísticas
    function updateStatistics() {
      dom.statsSummary.innerHTML = `
        <tr><th>Métrica</th><th>Valor</th></tr>
        <tr><td>Total de Registros</td><td>${stats.total.toLocaleString()}</td></tr>
        <tr class="highlight"><td>Registros Válidos</td><td>${stats.valid.toLocaleString()} (${((stats.valid/stats.total)*100).toFixed(1)}%)</td></tr>
        <tr class="highlight"><td>Registros Inválidos</td><td>${stats.invalid.toLocaleString()} (${((stats.invalid/stats.total)*100).toFixed(1)}%)</td></tr>
        <tr><td>Taxa de Sucesso</td><td>${((stats.valid/stats.total)*100).toFixed(1)}%</td></tr>
      `;
      
      dom.issuesTable.innerHTML = `
        <tr><th>Tipo de Problema</th><th>Quantidade</th><th>% do Total</th></tr>
        <tr><td>CPF Faltante</td><td>${stats.issues.missingCPF.toLocaleString()}</td><td>${((stats.issues.missingCPF/stats.total)*100).toFixed(1)}%</td></tr>
        <tr><td>CPF Inválido</td><td>${stats.issues.invalidCPF.toLocaleString()}</td><td>${((stats.issues.invalidCPF/stats.total)*100).toFixed(1)}%</td></tr>
        <tr><td>Telefone Faltante</td><td>${stats.issues.missingPhone.toLocaleString()}</td><td>${((stats.issues.missingPhone/stats.total)*100).toFixed(1)}%</td></tr>
        <tr><td>Telefone Inválido</td><td>${stats.issues.invalidPhone.toLocaleString()}</td><td>${((stats.issues.invalidPhone/stats.total)*100).toFixed(1)}%</td></tr>
        <tr><td>CPFs Duplicados</td><td>${stats.issues.duplicates.toLocaleString()}</td><td>${((stats.issues.duplicates/stats.total)*100).toFixed(1)}%</td></tr>
      `;
    }
    
    // Atualizar gráficos
    function updateCharts() {
      // Issues Distribution Chart
      const issuesCtx = document.getElementById('issues-chart').getContext('2d');
      if (window.issuesChart) {
        window.issuesChart.destroy();
      }
      window.issuesChart = new Chart(issuesCtx, {
        type: 'bar',
        data: {
          labels: ['CPF Faltante', 'CPF Inválido', 'Telefone Faltante', 'Telefone Inválido', 'CPFs Duplicados'],
          datasets: [{
            label: 'Problemas Encontrados',
            data: [
              stats.issues.missingCPF,
              stats.issues.invalidCPF,
              stats.issues.missingPhone,
              stats.issues.invalidPhone,
              stats.issues.duplicates
            ],
            backgroundColor: [
              '#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff'
            ]
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: { 
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return value.toLocaleString();
                }
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return context.raw.toLocaleString();
                }
              }
            }
          }
        }
      });
      
      // Validation Status Chart
      const validationCtx = document.getElementById('validation-chart').getContext('2d');
      if (window.validationChart) {
        window.validationChart.destroy();
      }
      window.validationChart = new Chart(validationCtx, {
        type: 'pie',
        data: {
          labels: ['Válidos', 'Inválidos'],
          datasets: [{
            data: [stats.valid, stats.invalid],
            backgroundColor: ['#4bc0c0', '#ff6384'],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value.toLocaleString()} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }
    
    // Mostrar amostras de dados
    function showDataSamples() {
      // Mostrar dados inválidos
      dom.invalidData.innerHTML = '';
      const invalidSampleSize = Math.min(100, invalidData.length);
      for (let i = 0; i < invalidSampleSize; i++) {
        const item = invalidData[i];
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${item.cpf || 'N/A'}</td>
          <td>${item.phone || 'N/A'}</td>
          <td>${item.nome || 'N/A'}</td>
          <td>${item.issues}</td>
        `;
        dom.invalidData.appendChild(row);
      }
      
      // Mostrar dados válidos
      dom.validData.innerHTML = '';
      const validSampleSize = Math.min(100, cleanData.length);
      for (let i = 0; i < validSampleSize; i++) {
        const item = cleanData[i];
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${item.cpf}</td>
          <td>${item.phone}</td>
          <td>${item.nome}</td>
          <td>R$ ${parseFloat(item.margem).toFixed(2)}</td>
        `;
        dom.validData.appendChild(row);
      }
    }
    
    // Funções de exportação
    async function exportarDadosValidos() {
      if (cleanData.length === 0) return alert('Nenhum dado válido para exportar.');
      
      showLoading('Exportando dados válidos...');
      setTimeout(() => {
        try {
          const ws = XLSX.utils.json_to_sheet(cleanData);
          const wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, "Dados_Válidos");
          XLSX.writeFile(wb, `dados_validos_${new Date().toISOString().slice(0,10)}.xlsx`);
        } catch (error) {
          alert('Erro ao exportar dados válidos: ' + error.message);
        } finally {
          hideLoading();
        }
      }, 100);
    }
    
    async function exportarDadosInvalidos() {
      if (invalidData.length === 0) return alert('Nenhum dado inválido para exportar.');
      
      showLoading('Exportando dados inválidos...');
      setTimeout(() => {
        try {
          const ws = XLSX.utils.json_to_sheet(invalidData);
          const wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, "Dados_Inválidos");
          XLSX.writeFile(wb, `dados_invalidos_${new Date().toISOString().slice(0,10)}.xlsx`);
        } catch (error) {
          alert('Erro ao exportar dados inválidos: ' + error.message);
        } finally {
          hideLoading();
        }
      }, 100);
    }
    
    async function exportarEstatisticas() {
      if (rawData.length === 0) return alert('Nenhum dado processado para exportar estatísticas.');
      
      showLoading('Exportando estatísticas...');
      setTimeout(() => {
        try {
          const statsSheetData = [
            ["Estatísticas de Limpeza", ""],
            ["Total de Registros", stats.total],
            ["Registros Válidos", `${stats.valid} (${((stats.valid/stats.total)*100).toFixed(1)}%)`],
            ["Registros Inválidos", `${stats.invalid} (${((stats.invalid/stats.total)*100).toFixed(1)}%)`],
            [],
            ["Problemas Encontrados", "Quantidade", "% do Total"],
            ["CPF Faltante", stats.issues.missingCPF, `${((stats.issues.missingCPF/stats.total)*100).toFixed(1)}%`],
            ["CPF Inválido", stats.issues.invalidCPF, `${((stats.issues.invalidCPF/stats.total)*100).toFixed(1)}%`],
            ["Telefone Faltante", stats.issues.missingPhone, `${((stats.issues.missingPhone/stats.total)*100).toFixed(1)}%`],
            ["Telefone Inválido", stats.issues.invalidPhone, `${((stats.issues.invalidPhone/stats.total)*100).toFixed(1)}%`],
            ["CPFs Duplicados", stats.issues.duplicates, `${((stats.issues.duplicates/stats.total)*100).toFixed(1)}%`]
          ];
          
          const ws = XLSX.utils.aoa_to_sheet(statsSheetData);
          const wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, "Estatísticas");
          XLSX.writeFile(wb, `estatisticas_${new Date().toISOString().slice(0,10)}.xlsx`);
        } catch (error) {
          alert('Erro ao exportar estatísticas: ' + error.message);
        } finally {
          hideLoading();
        }
      }, 100);
    }
    
    async function exportarTudo() {
      if (rawData.length === 0) return alert('Nenhum dado processado para exportar.');
      
      showLoading('Exportando relatório completo...');
      setTimeout(() => {
        try {
          const wb = XLSX.utils.book_new();
          
          // Adiciona aba de dados válidos
          if (cleanData.length > 0) {
            const validWS = XLSX.utils.json_to_sheet(cleanData);
            XLSX.utils.book_append_sheet(wb, validWS, "Dados_Válidos");
          }
          
          // Adiciona aba de dados inválidos
          if (invalidData.length > 0) {
            const invalidWS = XLSX.utils.json_to_sheet(invalidData);
            XLSX.utils.book_append_sheet(wb, invalidWS, "Dados_Inválidos");
          }
          
          // Adiciona aba de estatísticas
          const statsSheetData = [
            ["Estatísticas de Limpeza", ""],
            ["Total de Registros", stats.total],
            ["Registros Válidos", `${stats.valid} (${((stats.valid/stats.total)*100).toFixed(1)}%)`],
            ["Registros Inválidos", `${stats.invalid} (${((stats.invalid/stats.total)*100).toFixed(1)}%)`],
            [],
            ["Problemas Encontrados", "Quantidade", "% do Total"],
            ["CPF Faltante", stats.issues.missingCPF, `${((stats.issues.missingCPF/stats.total)*100).toFixed(1)}%`],
            ["CPF Inválido", stats.issues.invalidCPF, `${((stats.issues.invalidCPF/stats.total)*100).toFixed(1)}%`],
            ["Telefone Faltante", stats.issues.missingPhone, `${((stats.issues.missingPhone/stats.total)*100).toFixed(1)}%`],
            ["Telefone Inválido", stats.issues.invalidPhone, `${((stats.issues.invalidPhone/stats.total)*100).toFixed(1)}%`],
            ["CPFs Duplicados", stats.issues.duplicates, `${((stats.issues.duplicates/stats.total)*100).toFixed(1)}%`]
          ];
          
          const statsWS = XLSX.utils.aoa_to_sheet(statsSheetData);
          XLSX.utils.book_append_sheet(wb, statsWS, "Estatísticas");
          
          XLSX.writeFile(wb, `relatorio_completo_${new Date().toISOString().slice(0,10)}.xlsx`);
        } catch (error) {
          alert('Erro ao exportar relatório completo: ' + error.message);
        } finally {
          hideLoading();
        }
      }, 100);
    }
  </script>
</body>
</html>
